== Analyze CLI presence ==
ANALYZE_SCRIPT_PATH: /home/artnarrator/artnarrator.com/scripts/analyze_artwork.py
-- head of analyze script --
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Analyze artwork (SKU-first or file path) and, on success, commit a processed
folder + listing JSON. In production, requires real OpenAI output before writing.

Modes
-----
- PROD (ENVIRONMENT=prod and USE_STUB_ANALYSIS=0):
    * Calls OpenAI. If no usable AI output, exits non-zero and writes nothing.
- DEV/TEST (ENVIRONMENT!=prod or USE_STUB_ANALYSIS=1):
    * Uses stub listing so tests don't hit the network.

CLI
---
python scripts/analyze_artwork.py RJC-0509 --json-output
python scripts/analyze_artwork.py art-processing/unanalysed-artwork/RJC-0509/RJC-0509-analyse.jpg --json-output
"""
from __future__ import annotations

import argparse
import datetime as _dt
import json
import logging
import os
import shutil
import sys
import traceback
from pathlib import Path
from typing import Any, Dict, Tuple, Optional

# Ensure repo root on path for local imports
sys.path.insert(0, str(Path(__file__).resolve().parent.parent))

import config
from utils.logger_utils import setup_logger
from helpers.image_utils import make_working_copy, get_image_dimensions
from helpers.listing_utils import assemble_gdws_description
from utils.sku_assigner import get_next_sku

# ------------------------------------------------------------------------------
# Logger (writes to logs/ANALYZE_SCRIPT/*.log)
# ------------------------------------------------------------------------------
logger = setup_logger("analyze_artwork_script", "ANALYZE_SCRIPT")

# ------------------------------------------------------------------------------
# Compatibility shim for tests that monkeypatch `aa.client.chat.completions.create`
# ------------------------------------------------------------------------------
class _DummyCompletions:
    def create(self, *args, **kwargs):
        raise NotImplementedError("OpenAI client not configured")

class _DummyChat:
    def __init__(self):
        self.completions = _DummyCompletions()

class _DummyClient:
    def __init__(self):
        self.chat = _DummyChat()

