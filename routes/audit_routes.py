# routes/audit_routes.py
"""
Admin routes for viewing system audit trails and logs.

This module provides a user interface for administrators to review the detailed
logs generated by the application, helping to diagnose issues with file
processing, AI analysis, and other core workflows.

INDEX
-----
1.  Imports
2.  Blueprint Setup
3.  Helper Functions
4.  Audit Dashboard Route
"""

# ===========================================================================
# 1. Imports
# ===========================================================================
from __future__ import annotations
import logging
from pathlib import Path
import re
from datetime import datetime

from flask import Blueprint, render_template

import config
from utils.auth_decorators import role_required
from routes.utils import get_menu

logger = logging.getLogger(__name__)

# ===========================================================================
# 2. Blueprint Setup
# ===========================================================================
bp = Blueprint("audit", __name__, url_prefix="/admin/audit")


# ===========================================================================
# 3. Helper Functions
# ===========================================================================

def parse_log_file(log_path: Path) -> list[dict]:
    """Parses a structured log file into a list of event dictionaries."""
    entries = []
    # Example line: 2025-08-17 18:25:50 | user: robbie | action: upload | ...
    log_pattern = re.compile(
        r"^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) \| "
        r"user: (?P<user>.*?) \| "
        r"action: (?P<action>.*?) \| "
        r"file: (?P<file>.*?) \| "
        r"status: (?P<status>.*?) \| "
        r"detail: (?P<detail>.*?)"
        r"(?: \| error: (?P<error>.*?))?$"
    )

    try:
        with log_path.open("r", encoding="utf-8") as f:
            for line in f:
                match = log_pattern.match(line.strip())
                if match:
                    entry = match.groupdict()
                    # Convert timestamp string to datetime object for sorting
                    entry['timestamp_dt'] = datetime.strptime(entry['timestamp'], '%Y-%m-%d %H:%M:%S')
                    entries.append(entry)
    except Exception as e:
        logger.error(f"Failed to parse log file {log_path}: {e}")

    return entries


def get_all_audit_logs() -> list[dict]:
    """Scans all relevant log directories and returns a sorted list of all log entries."""
    all_entries = []
    log_dirs_to_scan = [
        "upload", "delete", "edits", "finalise", "lock",
        "analyse-openai", "analyse-google", "composite-generation-logs",
        "sellbrite-api-logs"
    ]

    for dir_name in log_dirs_to_scan:
        log_dir = config.LOGS_DIR / dir_name
        if log_dir.exists():
            for log_file in log_dir.glob("*.log"):
                all_entries.extend(parse_log_file(log_file))

    # Sort all entries by timestamp, newest first
    all_entries.sort(key=lambda x: x['timestamp_dt'], reverse=True)
    return all_entries


# ===========================================================================
# 4. Audit Dashboard Route
# ===========================================================================

@bp.route("/")
@role_required("admin")
def dashboard():
    """Renders the main audit trail dashboard."""
    audit_logs = get_all_audit_logs()
    return render_template("admin/audit.html", menu=get_menu(), logs=audit_logs)